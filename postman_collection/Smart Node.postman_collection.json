{
	"info": {
		"_postman_id": "f1970baf-52cb-4379-adc6-e25fe1aafbb7",
		"name": "Smart Node",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33194066"
	},
	"item": [
		{
			"name": "Get Weather Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required Content-Type header with value application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is within acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.lessThan(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/trigger-weather-update",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"trigger-weather-update"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Locations",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"  pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - message and location\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist;",
							"    pm.expect(responseData.location).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Location object should have latitude, longitude, _id, and __v properties\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.location).to.be.an('object');",
							"    pm.expect(responseData.location).to.have.property('latitude');",
							"    pm.expect(responseData.location).to.have.property('longitude');",
							"    pm.expect(responseData.location).to.have.property('_id');",
							"    pm.expect(responseData.location).to.have.property('__v');",
							"});",
							"",
							"",
							"pm.test(\"Latitude and longitude are within valid range\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.location.latitude).to.be.within(-90, 90);",
							"    pm.expect(responseData.location.longitude).to.be.within(-180, 180);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the __v field is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.location.__v).to.exist.and.to.be.a('number').and.to.satisfy((value) => value >= 0, \"Value should be a non-negative integer\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \"latitude\": 23.022505, \"longitude\": 72.571365 }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/locations/add",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"locations",
						"add"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Greetings",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Message field is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('message');",
							"});",
							"",
							"",
							"pm.test(\"Message field should not be empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "latitude",
						"value": "23.022505",
						"type": "text"
					},
					{
						"key": "longitude",
						"value": "72.571365",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:3000/locations",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"locations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get 5 Day's Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.be.an('array');",
							"    ",
							"    responseData.message.forEach(function(item) {",
							"        pm.expect(item).to.be.an('object');",
							"        pm.expect(item.date).to.exist;",
							"        pm.expect(item.sunrise).to.exist;",
							"        pm.expect(item.sunset).to.exist;",
							"        pm.expect(item.locationDetails).to.exist;",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Date, sunrise, and sunset are in a valid date/time format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.be.an('array');",
							"    ",
							"    responseData.message.forEach(function(item) {",
							"        pm.expect(item.date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"        pm.expect(item.sunrise).to.match(/^\\d{2}:\\d{2}:\\d{2}$/);",
							"        pm.expect(item.sunset).to.match(/^\\d{2}:\\d{2}:\\d{2}$/);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Location details contain non-empty latitude and longitude\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.be.an('array');",
							"  ",
							"  responseData.message.forEach(function(item) {",
							"    pm.expect(item).to.have.property('locationDetails').that.is.an('object');",
							"    pm.expect(item.locationDetails).to.have.property('latitude').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Latitude should not be empty\");",
							"    pm.expect(item.locationDetails).to.have.property('longitude').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Longitude should not be empty\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "latitude",
						"value": "23.022505",
						"type": "text"
					},
					{
						"key": "longitude",
						"value": "72.571365",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:3000/locations/data",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"locations",
						"data"
					]
				}
			},
			"response": []
		}
	]
}